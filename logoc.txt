I'll describe the logic for each Python module and its functions, highlighting recursive loops and prompt usage. I'll focus on how prompts are formed from other components.

agents.py:
This module defines agent classes for research, writing, and critiquing.

1. Agent (base class):
   - Initializes with role, goal, and tools attributes.

2. ResearcherAgent:
   - Inherits from Agent.
   - research(): Generates a research prompt and uses the Groq API to get a response.
   - _generate_response(): Makes an API call to Groq and returns a structured response.

3. WriterAgent:
   - Inherits from Agent.
   - write(): Creates content based on research output and other parameters.
   - Uses Groq API to generate content.

4. CriticAgent:
   - Inherits from Agent.
   - critique(): Reviews and critiques content.
   - Uses Groq API to generate critique.

Key points:
- All agents use the Groq API for text generation.
- Prompts are constructed using input parameters and predefined templates.
- No recursive loops are present in this module.

assem.py:
This module handles document assembly.

1. assemble_document():
   - Creates a Word document with a structured format.
   - Calls generate_visual() for visual content.

Key points:
- No recursive loops or complex prompt formation.
- Integrates with the visual.py module for image generation.

main.py:
This is the entry point of the application.

1. main():
   - Sets up the Streamlit UI.
   - Initializes agent instances.
   - Calls functions to generate outline, develop content, and assemble the document.

Key points:
- Orchestrates the overall flow of the application.
- No recursive loops or direct prompt formation.

outline.py:
This module generates the document outline.

1. generate_outline():
   - Uses ResearcherAgent, WriterAgent, and CriticAgent to create and refine the outline.
   - Iterative process (num_iterations times) to improve the outline.

Key points:
- Contains an iterative loop for outline refinement.
- Prompts are formed using research data and style prompts from style.py.

settings.py:
Handles configuration and environment setup.

Key points:
- No functions defined.
- Sets up environment variables and initializes the Groq client.

style.py:
Defines style templates for different types of documents.

Key points:
- Contains predefined style prompts for various document types.
- No functions defined, but the content is used in prompt formation in other modules.

ui.py:
Handles the user interface using Streamlit.

1. setup_ui():
   - Creates the input fields and options for the user.

2. run_research_process():
   - Manages the research process flow in the UI.
   - Contains conditional logic for different stages of the process.

3. display_app_header(), get_user_input(), display_progress():
   - Placeholder functions for UI components.

Key points:
- No recursive loops.
- Doesn't directly form prompts but collects user inputs used in prompt formation.

utils.py:
Contains utility functions for various tasks.

1. create_prompt():
   - Forms a basic research prompt using subject, research_type, and citation_style.

2. generate_outline():
   - Similar to the function in outline.py, but implemented differently.
   - Uses agents to iteratively create and refine the outline.

3. develop_outline() and develop_content():
   - These functions are similar and might be redundant.
   - They iterate through outline sections, using agents to research, write, and critique content.

Key points:
- Contains iterative loops for outline and content development.
- Prompts are formed using research data, style prompts, and other parameters.
- The develop_outline() and develop_content() functions might benefit from consolidation to avoid redundancy.

visual.py:
Placeholder for visual generation logic.

Overall observations:
1. The application uses a multi-agent approach (Researcher, Writer, Critic) to generate and refine content.
2. Prompts are typically formed by combining user inputs, research data, and predefined style templates.
3. There are iterative processes in outline and content generation, but no true recursive loops.
4. Some redundancy exists between utils.py and outline.py in outline generation logic.
5. The Groq API is central to the text generation process across all agents.
6. The application follows a modular structure, separating concerns like UI, document assembly, and content generation.​​​​​​​​​​​​​​​​